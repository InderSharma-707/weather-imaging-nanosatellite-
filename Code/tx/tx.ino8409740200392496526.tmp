#include <LiquidCrystal_I2C.h>//LCD I2C HEADER FILE
#include <Wire.h>
#include "DHT.h"
//#include <SoftwareSerial.h>

//SoftwareSerial HC12(11, 10);

LiquidCrystal_I2C lcd(0x20, 20, 4);

//#define TURBIDITY PA7
#define SensorPin PA0

int Turbidity_Sensor_Pin = PA7;
float Turbidity_Sensor_Voltage;
int samples = 600;
float ntu; // Nephelometric Turbidity Units
unsigned long int avgValue;  //Store the average value of the sensor feedback
float b;

int buf[10], temp;

#define DHTPIN PB4
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);

//int acc_x; //x-axis
//int x, y, x_val, y_val, last_val, val, stability;
//x_val = checkstabiliy(A2);

byte icon[8] = //icon for termometer
{
  B00100,
  B01010,
  B01010,
  B01110,
  B01110,
  B11111,
  B11111,
  B01110
};

//#define NSS PA9
//#define RST PB0
//#define DI0 PA1
//
//// #define TX_P 17
//
//float ph_value=7;
//float turbidity_value=9;
//
//LiquidCrystal_I2C lcd(0x20, 20, 4);  //I2C LCD PIN CONFIGURATION

//SETUP OF PINS
void setup() {
  Serial.begin(115200);//SOFTWARE SERIAL BEGIN
  Serial1.begin(9600);
//  HC12.begin(9600);               // Serial port to HC12
 dht.begin();
  pinMode(Turbidity_Sensor_Pin, INPUT);
  lcd.begin();
  lcd.createChar(1, icon);
  lcd.setCursor(2, 0);
  lcd.print("Solar SeaWeather");
  lcd.setCursor(3, 1);
  lcd.print("And Pollution ");
  lcd.setCursor(5, 2);
  lcd.print("Transmitter");
  lcd.setCursor(8, 3);
  lcd.print("Buoy");
  delay(1000);
  lcd.clear();
  lcd.setCursor(8, 1);
  lcd.print("Buoy");
  lcd.setCursor(5, 2);
  lcd.print("Transmitter");
  delay(1000);
  lcd.clear();
//  HC12.write("Start");
  delay(500);
  lcd.clear();
//  x_val = checkstabiliy(PA2);
  }

void loop() {

//acc_x = analogRead(PA2); ///present value of x-axis
//  x = acc_x - x_val;   
// Serial.print( "x=");
//  Serial.println(x);

  
 lcd.setCursor(2,0);
  lcd.print("Transmitter Buoy");

  Turbidity_Sensor_Voltage = 0;
  /* its good to take some samples and take the average value. This can be quite handy
      in situations when the values fluctuates a bit. This way you can take the average value
      i am going to take 600 samples
  */
  for (int i = 0; i < samples; i++)
  {
    Turbidity_Sensor_Voltage += ((float)analogRead(Turbidity_Sensor_Pin) / 1023) * 5;
  }
  Turbidity_Sensor_Voltage = Turbidity_Sensor_Voltage / samples;
  // uncomment the following two statments to check the voltage.
  // if you see any variations, take necessary steps to correct them
  // once you are satisfied with the voltage value then again you can comment these lines
  Serial.print(F("Voltage: "));
  Serial.println(Turbidity_Sensor_Voltage);

  Turbidity_Sensor_Voltage = round_to_dp(Turbidity_Sensor_Voltage, 2);
  if (Turbidity_Sensor_Voltage < 2.5) {
    ntu = 3000;
  } else {
    ntu = -1120.4 *(Turbidity_Sensor_Voltage)*2 + 5742.3 * Turbidity_Sensor_Voltage - 4352.9;
  }
  Serial.print(ntu);
  Serial.println(F(" NTU"));
  delay(10);
  lcd.setCursor(0, 1);
  lcd.print("Turbidity: ");
  lcd.setCursor(10, 1);
  lcd.print(ntu);
  lcd.setCursor(17, 1);
  lcd.print("ntu");


  for (int i = 0; i < 10; i++) //Get 10 sample value from the sensor for smooth the value
  {
    buf[i] = analogRead(SensorPin);
    delay(10);
  }
  for (int i = 0; i < 9; i++) //sort the analog from small to large
  {
    for (int j = i + 1; j < 10; j++)
    {
      if (buf[i] > buf[j])
      {
        temp = buf[i];
        buf[i] = buf[j];
        buf[j] = temp;
      }
    }
  }
  avgValue = 0;
  for (int i = 2; i < 8; i++)               //take the average value of 6 center sample
    avgValue += buf[i];
  float phValue = (float)avgValue * 5.0 / 1024 / 6; //convert the analog into millivolt
  phValue = 3.5 * phValue; //convert the millivolt into pH value
  lcd.setCursor(0, 2);
  lcd.print("pH: ");
  lcd.setCursor(4, 2);
  lcd.print(phValue,2);
  Serial.println(phValue, 2);
  lcd.setCursor(12,2);
      lcd.write(1);
      lcd.print(":");
 float t = dht.readTemperature();
 lcd.print(t);
 Serial.println(t);
  

  lcd.setCursor(0, 3);
  lcd.print("Humidity: ");
  lcd.setCursor(9, 3);
  float h = dht.readHumidity();
  lcd.print(h);
  Serial.println(h);
  lcd.setCursor(15, 3);
  lcd.print("%");
Serial1.println(String(ntu) + "*" + (String)phValue + "#" + (String)h+"&"+(String)t);
Serial.println(String(ntu) + "*" + (String)phValue + "#" + (String)h +"&"+(String)t);
}






float round_to_dp( float in_value, int decimal_place )
{
  float multiplier = powf( 10.0f, decimal_place );
  in_value = roundf( in_value * multiplier ) / multiplier;
  return in_value;
}
